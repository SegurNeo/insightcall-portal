import { CallTranscript } from '../types/calls.types';
import { generateStructuredResponse } from '../lib/gemini';

/**
 * üéØ CALL DECISION ENGINE
 * 
 * Filosof√≠a: Un solo LLM call extrae TODA la informaci√≥n y toma decisiones claras
 * 
 * Input: Transcripci√≥n completa (incluyendo tool_results)
 * Output: Decisiones estructuradas + datos extra√≠dos
 */

export interface CallDecision {
  // === INFORMACI√ìN DEL CLIENTE ===
  clientInfo: {
    // Tipo de cliente detectado
    clientType: 'existing' | 'lead' | 'new' | 'unknown';
    
    // Datos extra√≠dos de la conversaci√≥n Y tool_results
    extractedData: {
      nombreCompleto?: string;
      telefono?: string;
      email?: string;
      numeroPoliza?: string;           // CR√çTICO: extraer de tool_results si cliente existente
      codigoCliente?: string;          // Si se encontr√≥ en tool_results
      direccion?: string;
      ramo?: string;                   // Del cliente existente o nuevo contrato
    };
    
    // Info de cliente existente (de tool_results)
    existingClientInfo?: {
      clientId: string;
      clientName: string;
      numeroPoliza: string;            // DEBE estar presente si es cliente existente
      codigoCliente?: string;
      otrosDatos?: any;                // Datos adicionales de tool_results
    };
    
    // Info de Lead (de tool_results)
    leadInfo?: {
      leadId: string;
      campaignName: string;
      ramo: string;
      telefono?: string;
      email?: string;
    };
  };
  
  // === AN√ÅLISIS DE LA INCIDENCIA ===
  incidentAnalysis: {
    primaryIncident: {
      type: string;                    // "Nueva contrataci√≥n de seguros", etc.
      reason: string;                  // "Contrataci√≥n P√≥liza", etc.
      ramo?: string;                   // Para nuevas contrataciones
      description: string;             // Qu√© necesita el cliente
      confidence: number;              // 0-1
      numeroPolizaAfectada?: string;   // Si la gesti√≥n es sobre p√≥liza espec√≠fica
    };
    
    // Para casos complejos - m√∫ltiples gestiones en una llamada
    secondaryIncidents?: Array<{
      type: string;
      reason: string;
      ramo?: string;
      description: string;
      numeroPolizaAfectada?: string;
    }>;
    
    // Rellamadas (m√°s flexible)
    followUpInfo: {
      isFollowUp: boolean;             // ¬øEs rellamada?
      relatedTicketId?: string;        // Ticket al que da seguimiento
      createNewTicket: boolean;        // ¬øCrear ticket nuevo adem√°s de la rellamada?
      followUpReason?: string;         // Raz√≥n del seguimiento
    };
  };
  
  // === DECISIONES FINALES ===
  decisions: {
    // Decisiones sobre cliente
    clientDecision: {
      shouldCreateClient: boolean;     // ¬øCrear nuevo cliente?
      useExistingClient: boolean;      // ¬øUsar cliente existente?
      useLeadData: boolean;            // ¬øCrear desde lead?
      clientDataSource: 'extracted' | 'tool_results' | 'lead' | 'mixed';
    };
    
    // Decisiones sobre tickets
    ticketDecision: {
      shouldCreateTickets: boolean;    // ¬øCrear ticket(s)?
      ticketCount: number;             // Cu√°ntos tickets crear
      ticketsInfo: Array<{
        type: 'primary' | 'secondary';
        incident: any;                 // Referencia a la incidencia
        useClientId: string;           // ID del cliente a usar (asegurar consistencia)
        numeroPoliza?: string;         // P√≥liza espec√≠fica si es gesti√≥n existente
      }>;
    };
    
    // Decisiones sobre rellamadas
    followUpDecision: {
      shouldCreateFollowUp: boolean;   // ¬øCrear rellamada?
      followUpOnly: boolean;           // ¬øSolo rellamada, sin ticket?
      relatedTicket?: string;          // Ticket al que da seguimiento
    };
    
    priority: 'low' | 'medium' | 'high';
    requiresImmediate: boolean;
  };
  
  // === METADATOS ===
  metadata: {
    confidence: number;
    processingRecommendation: string;
    warnings?: string[];
    toolResultsFound: boolean;         // ¬øSe encontraron tool_results?
    clientSearchResults?: any;         // Info de b√∫squedas encontradas
  };
}

class CallDecisionEngine {
  
  private readonly COMPREHENSIVE_ANALYSIS_PROMPT = `
üéØ ERES UN ANALISTA EXPERTO EN SEGUROS QUE PROCESA LLAMADAS TELEF√ìNICAS

Tu trabajo es analizar UNA SOLA VEZ la transcripci√≥n completa (incluyendo tool_results) y extraer TODA la informaci√≥n para tomar decisiones.

## üìã METODOLOG√çA:

1. **LEE LA CONVERSACI√ìN COMPLETA** de principio a fin
2. **REVISA TODOS LOS TOOL_RESULTS** - aqu√≠ est√° la info del cliente
3. **IDENTIFICA AL CLIENTE** - ¬øExistente (con p√≥liza), Lead, o Nuevo?
4. **ANALIZA LA INCIDENCIA** - ¬øQu√© necesita? ¬øEs rellamada?
5. **TOMA DECISIONES CLARAS** - ¬øQu√© crear y con qu√© datos?

## üîç IDENTIFICACI√ìN DE CLIENTE (ORDEN DE PRIORIDAD):

### 1. CLIENTE EXISTENTE (de tool_results):
- Tool "identificar_cliente" devuelve cliente con p√≥liza
- Tool "buscar_poliza" encuentra p√≥liza existente
- Cliente menciona n√∫mero de p√≥liza que se confirma
- **EXTRAE**: codigoCliente, numeroPoliza, nombre completo

### 2. LEAD (de tool_results):
- Tool "identificar_cliente" devuelve leads de campa√±a
- Cliente viene de campa√±a espec√≠fica
- **EXTRAE**: leadId, campaignName, ramo, datos de contacto

### 3. CLIENTE NUEVO:
- No se encuentra en tool_results
- Quiere contratar seguro nuevo
- **EXTRAE**: datos de contacto de la conversaci√≥n

### 4. DESCONOCIDO:
- Sin tool_results claros
- Sin datos suficientes

# ‚ö†Ô∏è CR√çTICO - EXTRACCI√ìN DE TOOL_RESULTS:

Busca en los tool_results de cada transcript los resultados de herramientas:

## üîç TOOL: identificar_cliente

**EJEMPLO REAL de tool_result exitoso:**
\`\`\`json
{
  "tool_name": "identificar_cliente",
  "result_value": "{\"status\":\"success\",\"message\":\"Cliente encontrado exitosamente\",\"data\":{\"clientes\":[{\"campa√±a\":\"\",\"codigo_cliente\":\"701795F00\",\"email_cliente\":\"javi.garcia1407@gmail.com\",\"nif_cliente\":\"03473587N\",\"nombre_cliente\":\"JAVIER GARCIA RODRIGUEZ\",\"telefono_1\":\"635361079\",\"telefono_2\":\"\",\"telefono_3\":\"\"}],\"detalle_polizas\":[{\"codigo_cliente\":\"701795F00\",\"matricula\":\"8168DJR\",\"modelo\":\"ELANTRA\",\"poliza\":\"3022300060797\",\"ramo\":\"Coche\"}],\"tipo_busqueda\":\"D\",\"valor_busqueda\":\"03473587N\",\"vtos_polizas\":[{\"codigo_cliente\":\"701795F00\",\"compa√±ia\":\"REALE\",\"estado\":\"Contratada\",\"fecha_efecto\":\"01.05.23\",\"importe_poliza\":\"176,21\",\"mes_vencimiento\":\"Mayo\",\"poliza\":\"3022300060797\",\"poliza/suplemento\":\"P√≥liza\",\"ramo\":\"Coche\",\"reemplaza_a\":\"050025026\"}]}}",
  "is_error": false
}
\`\`\`

**INTERPRETACI√ìN:**
- ‚úÖ **Cliente EXISTENTE encontrado**: \`codigo_cliente: "701795F00"\`  
- ‚úÖ **Nombre completo**: "JAVIER GARCIA RODRIGUEZ"
- ‚úÖ **Email**: "javi.garcia1407@gmail.com"  
- ‚úÖ **Tel√©fono**: "635361079"
- ‚úÖ **P√≥liza actual**: "3022300060797" (ramo: Coche)

**SI data.clientes existe y length > 0 ‚Üí clientType: "existing"**
**SI data.leads existe y length > 0 ‚Üí clientType: "lead"**
**SI ni clientes ni leads ‚Üí clientType: "new" o "unknown"**

## üéØ EJEMPLO DE AN√ÅLISIS CORRECTO:

**CONVERSACI√ìN:**
USER: "Me llamo Javier. Mi DNI es 03-473-587-N"
AGENT: "[Tool Call: identificar_cliente]"
AGENT: "[Tool Result: identificar_cliente]" (con data.clientes encontrado)
AGENT: "Javier, veo que tiene contratada con nosotros una p√≥liza de coche..."
USER: "quer√≠a ver si me pod√≠an pasar un presupuesto para un seguro de hogar"

**AN√ÅLISIS CORRECTO:**
\`\`\`json
{
  "clientInfo": {
    "clientType": "existing",
    "extractedData": {
      "nombreCompleto": "JAVIER GARCIA RODRIGUEZ",
      "telefono": "635361079", 
      "email": "javi.garcia1407@gmail.com",
      "codigoCliente": "701795F00"
    },
    "existingClientInfo": {
      "clientId": "701795F00",
      "clientName": "JAVIER GARCIA RODRIGUEZ", 
      "numeroPoliza": "3022300060797",
      "codigoCliente": "701795F00"
    }
  },
  "incidentAnalysis": {
    "primaryIncident": {
      "type": "Nueva contrataci√≥n de seguros",
      "reason": "Contrataci√≥n P√≥liza",
      "ramo": "HOGAR",
      "description": "Cliente existente solicita presupuesto para seguro de hogar",
      "confidence": 0.95
    }
  },
  "decisions": {
    "clientDecision": {
      "shouldCreateClient": false,
      "useExistingClient": true,
      "useLeadData": false,
      "clientDataSource": "tool_results"
    },
    "ticketDecision": {
      "shouldCreateTickets": true,
      "ticketCount": 1,
      "ticketsInfo": [{
        "type": "primary",
        "useClientId": "701795F00",
        "numeroPoliza": ""
      }]
    }
  }
}
\`\`\`

## üö® ERRORES A EVITAR:

‚ùå **NO usar IDs fallback si encontraste cliente real**
‚ùå **NO poner "No especificado" si el ramo se menciona claramente**  
‚ùå **NO crear cliente nuevo si ya existe en tool_results**

## üéØ REGLAS DE EXTRACCI√ìN:

1. **SIEMPRE parsear result_value como JSON**
2. **SI data.clientes[0] existe ‚Üí usar codigo_cliente como clientId**
3. **SI usuario menciona ramo espec√≠fico ‚Üí extraerlo (HOGAR, AUTO, VIDA, etc.)**
4. **NUNCA inventar datos que no est√©n presentes**

## üé´ TIPOS DE INCIDENCIA COMPLETOS:

### üìã **NUEVA CONTRATACI√ìN DE SEGUROS**:
- **Contrataci√≥n P√≥liza**: Cliente quiere contratar nuevo seguro sin incidencia de vencimiento pendiente
- **P√≥liza anterior suspensi√≥n de garant√≠as**: Cliente quiere contratar y tiene reserva de prima en compa√±√≠a

### üîß **MODIFICACI√ìN P√ìLIZA EMITIDA** (requiere cliente existente + numeroPoliza):
- **Atenci√≥n al cliente - Modif datos p√≥liza**: Cambios que no var√≠an prima (nombre, apellido, etc.)
- **Cambio n¬∫ de cuenta**: Cambiar cuenta bancaria para domiciliaci√≥n
- **Cambio fecha de efecto**: Modificar fecha entrada en vigor del seguro
- **Cambio forma de pago**: Cambiar periodicidad del pago (no desde anual)
- **Modificaci√≥n n¬∫ asegurados**: Incluir/excluir asegurados en p√≥liza
- **Cambio direcci√≥n postal**: Modificar direcci√≥n postal de p√≥lizas
- **Modificaci√≥n coberturas**: Cambiar coberturas (ej: todo riesgo a terceros)
- **Cesi√≥n de derechos**: Para pr√©stamo hipotecario (con datos completos)
- **Cesi√≥n de derechos datos incompletos**: Para pr√©stamo (sin datos completos)
- **Correcci√≥n datos err√≥neos en p√≥liza**: Corregir errores detectados
- **Datos incompletos**: Cliente quiere cambios pero no tiene datos nuevos

### üè¢ **LLAMADA GESTI√ìN COMERCIAL**:
- **LLam gesti√≥n comerc**: Gesti√≥n sobre p√≥liza (no renovaci√≥n ni anulaci√≥n)
- **Pago de Recibo**: Realizar pago pendiente de recibo
- **Consulta cliente**: Consultas resueltas en l√≠nea (fechas, formas pago, etc.)
- **Cambio forma de pago**: Desde anual a fraccionado
- **Reenv√≠o siniestros**: Cuando se transfiere a cola siniestros
- **Reenv√≠o agentes humanos**: Transferir a humanos (general)
- **Reenv√≠o agentes humanos no quiere IA**: Cliente rechaza IA
- **Reenv√≠o agentes humanos no tomador**: Llamante no es el tomador

### üìÑ **SOLICITUD DUPLICADO P√ìLIZA**:
- **Correo ordinario**: Env√≠o por correo postal
- **Duplicado Tarjeta**: Tarjetas seguro decesos/salud
- **Email**: Env√≠o por correo electr√≥nico
- **Informaci√≥n recibos declaraci√≥n renta**: Recibos para declaraci√≥n renta

### üö® **OTROS SERVICIOS**:
- **Llamada asistencia en carretera** + **Siniestros**: Cliente necesita gr√∫a
- **Retenci√≥n cliente** + **Retenci√≥n cliente**: Ver renovaci√≥n o anular p√≥liza
- **Baja cliente en BBDD** + **Baja Cliente BBDD**: No quiere m√°s llamadas
- **Reclamaci√≥n cliente regalo** + **Reclamaci√≥n atenci√≥n al cliente**: No recibi√≥ regalo prometido

## üîÑ **DETECCI√ìN DE RELLAMADAS MEJORADA**:

**BUSCAR EN TOOL_RESULTS** la secci√≥n "incidencias":

EJEMPLO:
{
  "incidencias": [
    {
      "codigo_incidencia": "NG3291093",
      "tipo_de_incidencia": "Retenci√≥n de Cliente Cartera", 
      "motivo_de_incidencia": "Retenci√≥n de Cliente Cartera Llamada",
      "fecha_creacion_incidencia": "05.06.25",
      "poliza": "AU0420245310016",
      "ramo": "Coche"
    }
  ]
}

**FRASES QUE INDICAN RELLAMADA**:
- "sobre mi caso anterior", "mi incidencia", "el ticket que tengo abierto"
- Menciona c√≥digo de incidencia espec√≠fico (ej: "NG3291093")
- "me dijeron que me llamar√≠an", "sobre mi gesti√≥n pendiente"
- "la retenci√≥n que tengo", "mi modificaci√≥n pendiente"

**SI ES RELLAMADA**:
- isFollowUp: true
- relatedTicketId: "c√≥digo_incidencia" de las incidencias existentes
- createNewTicket: false (solo seguimiento) O true (seguimiento + nueva gesti√≥n)

## üéØ **L√ìGICA DE DECISI√ìN**:

### **CLIENTE EXISTENTE + INCIDENCIAS ABIERTAS**:
1. **SI menciona incidencia existente** ‚Üí RELLAMADA
2. **SI nueva gesti√≥n diferente** ‚Üí NUEVO TICKET + usar su clientId/numeroPoliza
3. **SI solo seguimiento** ‚Üí SOLO RELLAMADA

### **CLIENTE EXISTENTE + SIN INCIDENCIAS**:
1. **Modificaci√≥n p√≥liza** ‚Üí usar numeroPoliza de detalle_polizas relacionada
2. **Nueva contrataci√≥n** ‚Üí usar clientId existente
3. **Gesti√≥n/Duplicado** ‚Üí usar clientId + numeroPoliza si aplica

### **CLIENTE NUEVO/LEAD**:
1. **Solo "Nueva contrataci√≥n"** disponible
2. **Crear cliente primero** ‚Üí crear ticket con nuevo clientId

## üìû RELLAMADAS:

**DETECCI√ìN**: Solo si cliente menciona EXPL√çCITAMENTE:
- "tengo un caso abierto", "sobre mi incidencia anterior"
- "me dijeron que me llamar√≠an"
- Menciona n√∫mero de ticket espec√≠fico

**TIPOS**:
- **Solo seguimiento**: createNewTicket: false
- **Seguimiento + nueva gesti√≥n**: createNewTicket: true

## üéØ CONSISTENCIA DE DATOS:

### SI ES CLIENTE EXISTENTE (tool_results con data.clientes):
- ‚úÖ Usar codigo_cliente del tool_result 
- ‚úÖ Extraer numeroPoliza de detalle_polizas si es gesti√≥n sobre p√≥liza existente
- ‚ùå NO crear cliente nuevo

### SI ES LEAD (tool_results con data.leads):
- ‚úÖ Usar leadId del tool_result
- ‚úÖ Crear cliente desde lead

### SI ES CLIENTE NUEVO (sin tool_results o sin matches):
- ‚úÖ Crear cliente con datos extra√≠dos de conversaci√≥n

---

**CONVERSACI√ìN CON TOOL_RESULTS:**
{{conversation}}

**RESPONDE EN ESTE JSON EXACTO:**
{
  "clientInfo": {
    "clientType": "existing|lead|new|unknown",
    "extractedData": {
      "nombreCompleto": "nombre completo extra√≠do",
      "telefono": "tel√©fono en cualquier formato", 
      "email": "email si aparece",
      "numeroPoliza": "SOLO si es gesti√≥n sobre p√≥liza existente",
      "codigoCliente": "SOLO si es cliente existente de tool_results",
      "direccion": "si se menciona",
      "ramo": "HOGAR|AUTO|VIDA|DECESOS|SALUD si es nueva contrataci√≥n"
    },
    "existingClientInfo": {
      "clientId": "codigo_cliente del tool_result",
      "clientName": "nombre_cliente del tool_result", 
      "numeroPoliza": "poliza principal del detalle_polizas",
      "codigoCliente": "codigo_cliente del tool_result"
    },
    "leadInfo": {
      "leadId": "idlead del tool_result",
      "campaignName": "campa√±a del tool_result",
      "ramo": "ramo del lead"
    }
  },
  "incidentAnalysis": {
    "primaryIncident": {
      "type": "Nueva contrataci√≥n de seguros|Modificaci√≥n p√≥liza emitida|Llamada gesti√≥n comercial|Solicitud duplicado p√≥liza|Llamada asistencia en carretera|Retenci√≥n cliente|Baja cliente en BBDD|Reclamaci√≥n cliente regalo",
      "reason": "Contrataci√≥n P√≥liza|P√≥liza anterior suspensi√≥n de garant√≠as|Atenci√≥n al cliente - Modif datos p√≥liza|Cambio n¬∫ de cuenta|Cambio fecha de efecto|Cambio forma de pago|Modificaci√≥n n¬∫ asegurados|Cambio direcci√≥n postal|Modificaci√≥n coberturas|Cesi√≥n de derechos|Cesi√≥n de derechos datos incompletos|Correcci√≥n datos err√≥neos en p√≥liza|Datos incompletos|LLam gesti√≥n comerc|Pago de Recibo|Consulta cliente|Reenv√≠o siniestros|Reenv√≠o agentes humanos|Reenv√≠o agentes humanos no quiere IA|Reenv√≠o agentes humanos no tomador|Correo ordinario|Duplicado Tarjeta|Email|Informaci√≥n recibos declaraci√≥n renta|Siniestros|Retenci√≥n cliente|Baja Cliente BBDD|Reclamaci√≥n atenci√≥n al cliente",
      "ramo": "HOGAR|AUTO|VIDA|DECESOS|SALUD|OTROS SOLO para nuevas contrataciones",
      "description": "descripci√≥n clara de qu√© necesita el cliente",
      "confidence": 0.95,
      "numeroPolizaAfectada": "SOLO si es gesti√≥n sobre p√≥liza espec√≠fica de detalle_polizas"
    },
    "followUpInfo": {
      "isFollowUp": false,
      "relatedTicketId": "codigo_incidencia de las incidencias existentes si es rellamada", 
      "createNewTicket": true,
      "followUpReason": "raz√≥n del seguimiento si aplica"
    }
  },
  "decisions": {
    "clientDecision": {
      "shouldCreateClient": "true si es new o lead, false si existing",
      "useExistingClient": "true si encontrado en tool_results",
      "useLeadData": "true si es lead de tool_results", 
      "clientDataSource": "tool_results|extracted|mixed"
    },
    "ticketDecision": {
      "shouldCreateTickets": true,
      "ticketCount": 1,
      "ticketsInfo": [{
        "type": "primary",
        "useClientId": "ID del cliente a usar (codigo_cliente o nuevo)",
        "numeroPoliza": "SOLO si gesti√≥n sobre p√≥liza existente"
      }]
    },
    "followUpDecision": {
      "shouldCreateFollowUp": false,
      "followUpOnly": false,
      "relatedTicket": "ticket relacionado si aplica"
    },
    "priority": "high|medium|low",
    "requiresImmediate": false
  },
  "metadata": {
    "confidence": 0.95,
    "processingRecommendation": "explicaci√≥n de qu√© hacer",
    "warnings": ["advertencias si las hay"],
    "toolResultsFound": true,
    "clientSearchResults": "resumen de lo encontrado en tool_results"
  }
}
`;

  /**
   * üéØ M√âTODO PRINCIPAL: Analizar llamada completa incluyendo tool_results
   */
  async analyzeCall(transcripts: CallTranscript[], conversationId: string): Promise<CallDecision> {
    console.log(`üéØ [DECISION ENGINE] Analizando llamada completa: ${conversationId}`);
    
    try {
      // Formatear conversaci√≥n completa incluyendo tool_results
      const conversation = this.formatConversationWithTools(transcripts);
      
      // Preparar prompt
      const prompt = this.COMPREHENSIVE_ANALYSIS_PROMPT.replace('{{conversation}}', conversation);
      
      console.log(`üß† [DECISION ENGINE] Enviando an√°lisis comprehensivo a Gemini...`);
      
      // Una sola llamada LLM que extrae TODA la informaci√≥n
      const decision = await generateStructuredResponse<CallDecision>(prompt);
      
      if (!decision) {
        throw new Error('No se recibi√≥ respuesta v√°lida del LLM');
      }
      
      // Validar y normalizar respuesta
      const validatedDecision = this.validateAndNormalizeDecision(decision);
      
      console.log(`‚úÖ [DECISION ENGINE] An√°lisis completado:`, {
        clientType: validatedDecision.clientInfo.clientType,
        hasExistingClient: validatedDecision.decisions.clientDecision.useExistingClient,
        hasLead: validatedDecision.decisions.clientDecision.useLeadData,
        shouldCreateClient: validatedDecision.decisions.clientDecision.shouldCreateClient,
        incidentType: validatedDecision.incidentAnalysis.primaryIncident.type,
        ticketCount: validatedDecision.decisions.ticketDecision.ticketCount,
        confidence: validatedDecision.metadata.confidence
      });
      
      return validatedDecision;
      
    } catch (error) {
      console.error(`‚ùå [DECISION ENGINE] Error en an√°lisis:`, error);
      return this.createFallbackDecision(conversationId);
    }
  }
  
  /**
   * üìù Formatear conversaci√≥n incluyendo tool_results (CR√çTICO)
   */
  private formatConversationWithTools(transcripts: CallTranscript[]): string {
    let formattedConversation = '';
    
    for (const transcript of transcripts) {
      // Agregar el mensaje de conversaci√≥n
      formattedConversation += `${transcript.speaker.toUpperCase()}: ${transcript.message}\n`;
      
      // Agregar tool_results si existen
      if (transcript.tool_results && transcript.tool_results.length > 0) {
        formattedConversation += `TOOL_RESULTS:\n`;
        for (const toolResult of transcript.tool_results) {
          formattedConversation += `- Tool: ${toolResult.tool_name}\n`;
          formattedConversation += `- Result: ${toolResult.result_value}\n`;
          formattedConversation += `- Error: ${toolResult.is_error}\n`;
        }
        formattedConversation += `\n`;
      }
    }
    
    return formattedConversation;
  }
  
  /**
   * ‚úÖ Validar y normalizar la respuesta del LLM
   */
  private validateAndNormalizeDecision(decision: any): CallDecision {
    const normalized: CallDecision = {
      clientInfo: {
        clientType: this.normalizeClientType(decision.clientInfo?.clientType),
        extractedData: decision.clientInfo?.extractedData || {}
      },
      incidentAnalysis: {
        primaryIncident: {
          type: decision.incidentAnalysis?.primaryIncident?.type || 'Llamada gesti√≥n comercial',
          reason: decision.incidentAnalysis?.primaryIncident?.reason || 'Consulta cliente',
          description: decision.incidentAnalysis?.primaryIncident?.description || 'Gesti√≥n telef√≥nica',
          confidence: Math.max(0, Math.min(1, decision.incidentAnalysis?.primaryIncident?.confidence || 0.5))
        },
        followUpInfo: {
          isFollowUp: decision.incidentAnalysis?.followUpInfo?.isFollowUp || false,
          createNewTicket: decision.incidentAnalysis?.followUpInfo?.createNewTicket !== false, // Default true
          relatedTicketId: decision.incidentAnalysis?.followUpInfo?.relatedTicketId,
          followUpReason: decision.incidentAnalysis?.followUpInfo?.followUpReason
        }
      },
      decisions: {
        clientDecision: {
          shouldCreateClient: decision.decisions?.clientDecision?.shouldCreateClient || false,
          useExistingClient: decision.decisions?.clientDecision?.useExistingClient || false,
          useLeadData: decision.decisions?.clientDecision?.useLeadData || false,
          clientDataSource: this.normalizeDataSource(decision.decisions?.clientDecision?.clientDataSource)
        },
        ticketDecision: {
          shouldCreateTickets: decision.decisions?.ticketDecision?.shouldCreateTickets !== false, // Default true
          ticketCount: Math.max(1, decision.decisions?.ticketDecision?.ticketCount || 1),
          ticketsInfo: decision.decisions?.ticketDecision?.ticketsInfo || []
        },
        followUpDecision: {
          shouldCreateFollowUp: decision.decisions?.followUpDecision?.shouldCreateFollowUp || false,
          followUpOnly: decision.decisions?.followUpDecision?.followUpOnly || false,
          relatedTicket: decision.decisions?.followUpDecision?.relatedTicket
        },
        priority: this.normalizePriority(decision.decisions?.priority),
        requiresImmediate: decision.decisions?.requiresImmediate || false
      },
      metadata: {
        confidence: Math.max(0, Math.min(1, decision.metadata?.confidence || 0.5)),
        processingRecommendation: decision.metadata?.processingRecommendation || 'Procesar seg√∫n an√°lisis est√°ndar',
        warnings: decision.metadata?.warnings || [],
        toolResultsFound: decision.metadata?.toolResultsFound || false,
        clientSearchResults: decision.metadata?.clientSearchResults
      }
    };
    
    // Agregar campos opcionales
    if (decision.clientInfo?.existingClientInfo) {
      normalized.clientInfo.existingClientInfo = decision.clientInfo.existingClientInfo;
    }
    
    if (decision.clientInfo?.leadInfo) {
      normalized.clientInfo.leadInfo = decision.clientInfo.leadInfo;
    }
    
    if (decision.incidentAnalysis?.primaryIncident?.ramo) {
      normalized.incidentAnalysis.primaryIncident.ramo = decision.incidentAnalysis.primaryIncident.ramo;
    }
    
    if (decision.incidentAnalysis?.primaryIncident?.numeroPolizaAfectada) {
      normalized.incidentAnalysis.primaryIncident.numeroPolizaAfectada = decision.incidentAnalysis.primaryIncident.numeroPolizaAfectada;
    }
    
    if (decision.incidentAnalysis?.secondaryIncidents) {
      normalized.incidentAnalysis.secondaryIncidents = decision.incidentAnalysis.secondaryIncidents;
    }
    
    return normalized;
  }
  
  /**
   * üîÑ Crear decisi√≥n fallback para casos de error
   */
  private createFallbackDecision(conversationId: string): CallDecision {
    return {
      clientInfo: {
        clientType: 'unknown',
        extractedData: {}
      },
      incidentAnalysis: {
        primaryIncident: {
          type: 'Llamada gesti√≥n comercial',
          reason: 'Consulta cliente',
          description: 'Gesti√≥n telef√≥nica procesada con datos limitados',
          confidence: 0.3
        },
        followUpInfo: {
          isFollowUp: false,
          createNewTicket: true
        }
      },
      decisions: {
        clientDecision: {
          shouldCreateClient: false,
          useExistingClient: false,
          useLeadData: false,
          clientDataSource: 'extracted'
        },
        ticketDecision: {
          shouldCreateTickets: true,
          ticketCount: 1,
          ticketsInfo: []
        },
        followUpDecision: {
          shouldCreateFollowUp: false,
          followUpOnly: false
        },
        priority: 'medium',
        requiresImmediate: false
      },
      metadata: {
        confidence: 0.3,
        processingRecommendation: `Procesar como gesti√≥n est√°ndar. Error en an√°lisis para ${conversationId}`,
        warnings: ['Error en an√°lisis LLM - usando valores por defecto'],
        toolResultsFound: false
      }
    };
  }
  
  /**
   * üîß M√©todos auxiliares de normalizaci√≥n
   */
  private normalizeClientType(type: any): 'existing' | 'lead' | 'new' | 'unknown' {
    if (['existing', 'lead', 'new', 'unknown'].includes(type)) {
      return type;
    }
    return 'unknown';
  }
  
  private normalizeDataSource(source: any): 'extracted' | 'tool_results' | 'lead' | 'mixed' {
    if (['extracted', 'tool_results', 'lead', 'mixed'].includes(source)) {
      return source;
    }
    return 'extracted';
  }
  
  private normalizePriority(priority: any): 'low' | 'medium' | 'high' {
    if (['low', 'medium', 'high'].includes(priority)) {
      return priority;
    }
    return 'medium';
  }
}

// Exportar instancia singleton
export const callDecisionEngine = new CallDecisionEngine(); 