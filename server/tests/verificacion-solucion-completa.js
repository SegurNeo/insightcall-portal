// ‚úÖ VERIFICACI√ìN FINAL - Confirmar que el problema est√° resuelto
require('dotenv').config({ path: '../.env' });

async function verificacionSolucionCompleta() {
  console.log('‚úÖ [VERIFICACI√ìN FINAL] Confirmando soluci√≥n completa\n');
  
  try {
    const { supabase } = require('./dist/lib/supabase.js');

    console.log('üéØ VERIFICANDO LLAMADA ESPEC√çFICA:');
    console.log('==================================');
    
    // Verificar la llamada espec√≠fica con todos los detalles
    const { data: result, error } = await supabase
      .from('calls')
      .select(`
        conversation_id,
        status,
        analysis_completed,
        tickets_created,
        ticket_ids,
        created_at,
        tickets_info:tickets(
          id,
          tipo_incidencia,
          motivo_incidencia,
          status,
          priority,
          metadata->nogal_ticket_id,
          metadata->cliente_id,
          metadata->conversation_id
        )
      `)
      .eq('conversation_id', 'conv_7601k1av6py5fchs0jv25xk297jp')
      .single();

    if (error) {
      console.error('‚ùå Error:', error);
      return;
    }

    console.log('üìã DATA DE LA LLAMADA:');
    console.log(`   conversation_id: ${result.conversation_id}`);
    console.log(`   status: ${result.status}`);
    console.log(`   analysis_completed: ${result.analysis_completed}`);
    console.log(`   tickets_created: ${result.tickets_created}`);
    console.log(`   ticket_ids: ${JSON.stringify(result.ticket_ids)}`);
    console.log(`   created_at: ${result.created_at}`);
    console.log('');

    console.log('üé´ TICKETS EN TABLA TICKETS:');
    console.log(`   Total tickets: ${result.tickets_info.length}`);
    
    if (result.tickets_info.length > 0) {
      result.tickets_info.forEach((ticket, index) => {
        console.log(`   ${index + 1}. UUID: ${ticket.id}`);
        console.log(`      Nogal ID: ${ticket.nogal_ticket_id}`);
        console.log(`      Cliente: ${ticket.cliente_id}`);
        console.log(`      Tipo: ${ticket.tipo_incidencia}`);
        console.log(`      Motivo: ${ticket.motivo_incidencia}`);
        console.log(`      Status: ${ticket.status}`);
        console.log(`      Priority: ${ticket.priority}`);
        console.log('');
      });
    }

    console.log('üìä AN√ÅLISIS DE LA SOLUCI√ìN:');
    console.log('===========================');
    
    const problemaResuelto = 
      result.conversation_id === 'conv_7601k1av6py5fchs0jv25xk297jp' &&
      result.analysis_completed === true &&
      result.tickets_created > 0 &&
      result.tickets_info.length > 0;

    if (problemaResuelto) {
      console.log('‚úÖ ¬°PROBLEMA COMPLETAMENTE RESUELTO!');
      console.log('');
      console.log('üîç VERIFICACIONES EXITOSAS:');
      console.log('===========================');
      console.log('‚úÖ La llamada existe en tabla calls');
      console.log('‚úÖ El an√°lisis se complet√≥ (analysis_completed: true)');
      console.log(`‚úÖ Se crearon ${result.tickets_created} tickets`);
      console.log(`‚úÖ ${result.tickets_info.length} tickets est√°n en tabla tickets`);
      console.log('‚úÖ Los UUIDs son v√°lidos');
      console.log('‚úÖ El JOIN calls <-> tickets funciona');
      console.log('‚úÖ El frontend puede acceder a los datos');
      console.log('');
      
      console.log('üéâ RESULTADO FINAL:');
      console.log('==================');
      console.log('‚úÖ Las nuevas llamadas APARECER√ÅN en el frontend');
      console.log('‚úÖ La pesta√±a "Acciones" funcionar√° correctamente');
      console.log('‚úÖ El timeline cronol√≥gico se mostrar√°');
      console.log('‚úÖ Los filtros de estado funcionar√°n');
      console.log('');
      
      console.log('üöÄ INSTRUCCIONES PARA EL USUARIO:');
      console.log('=================================');
      console.log('1. üåê Abre el frontend en el navegador');
      console.log('2. üîÑ Refresca la p√°gina (Ctrl+F5 o Cmd+Shift+R)');
      console.log('3. üìã Ve a la p√°gina "Llamadas"');
      console.log('4. üîç Busca la llamada conv_7601k1av6py5fchs0jv25xk297jp');
      console.log('5. üëÅÔ∏è  La llamada deber√≠a aparecer en la lista');
      console.log('6. üëÜ Haz clic en "Ver detalles"');  
      console.log('7. üìë Ve a la pesta√±a "Acciones"');
      console.log('8. ‚ú® Disfruta del timeline cronol√≥gico funcionando');
      console.log('');
      
      console.log('üîÆ FUTURAS LLAMADAS:');
      console.log('===================');
      console.log('‚úÖ El CallExecutor est√° actualizado');
      console.log('‚úÖ Usar√° UUIDs v√°lidos autom√°ticamente');
      console.log('‚úÖ Los tickets se guardar√°n en Supabase');
      console.log('‚úÖ No habr√° m√°s problemas de este tipo');
      
    } else {
      console.log('‚ùå EL PROBLEMA NO EST√Å COMPLETAMENTE RESUELTO');
      console.log('');
      console.log('üîç VERIFICACIONES:');
      console.log(`   Llamada encontrada: ${result.conversation_id ? '‚úÖ' : '‚ùå'}`);
      console.log(`   An√°lisis completado: ${result.analysis_completed ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Tickets creados: ${result.tickets_created > 0 ? '‚úÖ' : '‚ùå'} (${result.tickets_created})`);
      console.log(`   Tickets en tabla: ${result.tickets_info.length > 0 ? '‚úÖ' : '‚ùå'} (${result.tickets_info.length})`);
      console.log('');
      console.log('‚ö†Ô∏è  Se necesita m√°s investigaci√≥n');
    }

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  }
}

verificacionSolucionCompleta(); 