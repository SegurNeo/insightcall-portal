// üîÑ Script para reprocesar llamada espec√≠fica
// Reactiva el an√°lisis IA y creaci√≥n de tickets autom√°ticos

const { CallProcessingService } = require('./src/services/callProcessingService');

console.log('üîÑ Reprocesando llamada de prueba...\n');

async function reprocessCall() {
  const conversationId = 'conv_01jzthyz3gfytadhy5apzqvfq6';
  
  try {
    console.log(`üìû Reprocesando llamada: ${conversationId}`);
    
    const callProcessor = new CallProcessingService();
    
    // Simular webhook payload b√°sico para reactivar el procesamiento
    const mockPayload = {
      conversation_id: conversationId,
      start_time: '2025-07-10T22:16:11Z',
      end_time: '2025-07-10T22:18:40Z'
    };
    
    console.log('üöÄ Iniciando reprocesamiento...');
    const result = await callProcessor.processIncomingCall(mockPayload);
    
    console.log('‚úÖ Reprocesamiento completado:');
    console.log(`   - ID: ${result.id}`);
    console.log(`   - An√°lisis: ${result.analysis_completed ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Tickets: ${result.tickets_created || 0}`);
    console.log(`   - Procesado: ${result.processed_at ? '‚úÖ' : '‚è≥'}`);
    
    if (result.ai_analysis) {
      console.log('\nüß† An√°lisis IA:');
      console.log(`   - Tipo: ${result.ai_analysis.tipo_incidencia || result.ai_analysis.incident_type}`);
      console.log(`   - Confianza: ${result.ai_analysis.confidence}`);
      console.log(`   - Requiere ticket: ${result.ai_analysis.requiere_ticket ?? result.ai_analysis.requires_ticket ?? 'unknown'}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error en reprocesamiento:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Ejecutar
reprocessCall(); 